import cx from "classnames";
import * as Icons from "heroicons-react";
import React, { ChangeEvent, ReactNode } from "react";

export default function InputGroup({
	label,
	inputClassName,
	disabled,
	labelClassName,
	className,
	id,
	invalid,
	error,
	helpText,
	hideHelpTextIfError,
	hint,
	placeholder,
	value,
	onChange,
	...rest
}: {
	/**
	 * Mandatory if label is not set or not a string.
	 * The id of the input element. If not provided, it will be generated from the label.
	 * Other elements, such as the help text and error, may have their id set to the this id, appended with "-description" or "-error", respectively.
	 */
	id?: string;

	/**
	 * The value of the input, forwarded directly to the input element.
	 */
	value?: string;

	/**
	 * A placeholder for the input.
	 */
	placeholder?: string;

	/**
	 * A change handler, forwarded directly to the input element
	 * @param e
	 */
	onChange?: (e: ChangeEvent<HTMLInputElement>) => void;

	/**
	 * Whether or not the input is disabled. If disabled, the input will adopt a gray background.
	 */
	disabled?: boolean;

	/**
	 * If label is not set, or not a string, then an id must be provided.
	 * If id is not provided, then the id will be autogenerated and set to `"input-field-" + label.replace(/[^A-Za-z0-9\-_:.]/g, "_")`.
	 * Other elements, such as the help text and error, may have their id set to the autogenerated id, appended with "-description" or "-error", respectively.
	 */
	label?: ReactNode;

	/**
	 * Classes to be added to the outermost div.
	 */
	className?: string;

	/**
	 * Classes to be added to the input label
	 */
	labelClassName?: string;

	/**
	 * Classes to be added to the input.
	 */
	inputClassName?: string;

	/**
	 * @default whether or not error is set.
	 * If set to true, the input will have a red outline and icon (regardless of whether or not error is set).
	 * If set to false, the error is not shown even if it exists.
	 * If set to undefined, the red outline and error is only shown if an error exists. If no error exists, the input will also not be outlined red.
	 */
	invalid?: boolean;
	/**
	 * Will only be displayed if `invalid` is `true` or not set.
	 */
	error?: ReactNode;

	/**
	 * Help text to be displayed below the input
	 */
	helpText?: ReactNode;

	/**
	 * A corner hint. This will only be shown if a label is provided.
	 */
	hint?: ReactNode;

	/**
	 * @default false.
	 */
	hideHelpTextIfError?: boolean;

	/**
	 * @rest
	 * All other props are forwarded to the input element.
	 */
	rest: React.DetailedHTMLProps<
		React.InputHTMLAttributes<HTMLInputElement>,
		HTMLInputElement
	>;
}): React.ReactElement {
	if (!label && !id) {
		throw new Error("InputGroup: one of label and id must be set.");
	}
	if (typeof label !== "string" && !id) {
		throw new Error(
			"InputGroup: if an id is not provided, the label must be a string."
		);
	}
	id =
		id ||
		`input-field-${(label as string).replace(/[^A-Za-z0-9\-_:.]/g, "_")}`;
	if (invalid === undefined || invalid === null) {
		invalid = !!error;
	}
	return (
		<div className={className}>
			{label && (
				<div className={hint ? "flex justify-between" : ""}>
					<label
						id={id + "-label"}
						htmlFor={id}
						className={
							"block text-sm font-medium leading-5 text-gray-700 " +
							(labelClassName || "")
						}
					>
						{label}
					</label>
					{hint && (
						<span
							className="text-sm leading-5 text-gray-500"
							id={id + "-hint"}
						>
							{hint}
						</span>
					)}
				</div>
			)}

			<div
				className={cx("relative rounded-md shadow-sm", label && "mt-1")}
			>
				<input
					id={id}
					type={"text"}
					className={cx(
						"block w-full sm:text-sm sm:leading-5",
						disabled ? "bg-gray-100" : "bg-white",
						invalid &&
							"pr-10 border-red-300 text-red-900 placeholder-red-300 focus:border-red-300 focus:ring-red-500",
						inputClassName
					)}
					aria-invalid={invalid}
					aria-describedby={error ? id + "-error" : undefined}
					placeholder={placeholder}
					disabled={disabled}
					value={value || ""}
					onChange={onChange}
					{...rest}
				/>

				{invalid && (
					<div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
						<Icons.ExclamationCircle className="h-5 w-5 text-red-500" />
					</div>
				)}
			</div>
			{helpText && (!hideHelpTextIfError || !invalid) && (
				<p
					className="mt-2 text-sm text-gray-500"
					id={id + "-description"}
				>
					{helpText}
				</p>
			)}
			{invalid && error && (
				<p className={"mt-2 text-sm text-red-600"} id={id + "-error"}>
					{error}
				</p>
			)}
		</div>
	);
}
